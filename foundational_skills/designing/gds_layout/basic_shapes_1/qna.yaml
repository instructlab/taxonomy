created_by: Bo Wen<bwen@us.ibm.com>, Kuan Yu Hsieh<kyhsieh@ibm.com>
seed_examples:
- answer: 'Here''s the Python code to generate a GDSII file for a circle with the
    given specifications:


    ```python

    import gdspy


    # Define parameters

    radius = 10.0  # Radius of the circle in mm

    center = (0, 0)  # Center of the circle

    layer = 0  # GDSII layer number


    # Create a new GDSII library

    gdsii_lib = gdspy.GdsLibrary()


    # Create a cell to contain the circle

    cell = gdsii_lib.new_cell(''CIRCLE'')


    # Create the circle

    circle = gdspy.Round(center, radius, layer=layer)


    # Add the circle to the cell

    cell.add(circle)


    # Define the filename

    filename = "Circle.gds"


    # Save the GDSII file

    gdsii_lib.write_gds(filename)


    print(f"GDSII file ''{filename}'' has been created successfully.")

    ```


    This code will create a GDSII file named "Circle.gds" containing a circle with
    a radius of 10 mm, centered at (0,0), on layer 0.'
  context: Circle.gds
  question: Write a Python code to generate GDSII for a circle on layer 0, radius
    = 10 mm, center at 0,0.
- answer: 'Here''s the Python code to generate a GDSII file for a donut shape with
    the given specifications:


    ```python

    import gdspy


    # Define parameters

    outer_radius = 10.0  # Outer radius of the donut in mm

    inner_radius = 5.0  # Inner radius of the donut in mm

    center = (0, 0)  # Center of the donut

    layer = 0  # GDSII layer number

    max_points_distance = 0.01  # Maximum distance between points in mm


    # Create a new GDSII library

    gdsii_lib = gdspy.GdsLibrary()


    # Create a cell to contain the donut

    cell = gdsii_lib.new_cell(''DONUT'')


    # Create the outer circle

    outer_circle = gdspy.Round(center, outer_radius, tolerance=max_points_distance,
    layer=layer)


    # Create the inner circle (as a hole)

    inner_circle = gdspy.Round(center, inner_radius, tolerance=max_points_distance,
    layer=layer)


    # Combine the outer and inner circles to form a donut (annulus)

    donut = gdspy.boolean(outer_circle, inner_circle, ''not'', layer=layer)


    # Add the donut to the cell

    cell.add(donut)


    # Define the filename

    filename = "Donut.gds"


    # Save the GDSII file

    gdsii_lib.write_gds(filename)


    print(f"GDSII file ''{filename}'' has been created successfully.")

    ```


    This code will create a GDSII file named "Donut.gds" containing a donut shape
    with the specified dimensions.'
  context: Donut.gds
  question: Generate a donut shape with 10 mm outer radius and 5 mm inner radius.
    Make the circle smoother by setting max distance between point 0.01mm.
- answer: 'Here''s the Python code to generate a GDSII file for an oval with the given
    specifications:


    ```python

    import gdspy

    import numpy as np


    # Define parameters

    major_axis = 20.0  # Major axis of the oval in mm

    minor_axis = 13.0  # Minor axis of the oval in mm

    center = (0, 0)  # Center of the oval

    layer = 0  # GDSII layer number

    num_points = 100  # Number of points to approximate the ellipse


    # Create a new GDSII library

    gdsii_lib = gdspy.GdsLibrary()


    # Create a cell to contain the oval

    cell = gdsii_lib.new_cell(''OVAL'')


    # Generate points for the ellipse

    t = np.linspace(0, 2 * np.pi, num_points)

    x = (major_axis / 2) * np.cos(t) + center[0]

    y = (minor_axis / 2) * np.sin(t) + center[1]

    points = np.column_stack((x, y))


    # Create the polygon for the oval

    oval = gdspy.Polygon(points, layer=layer)


    # Add the oval to the cell

    cell.add(oval)


    # Define the filename

    filename = "Oval.gds"


    # Save the GDSII file

    gdsii_lib.write_gds(filename)


    print(f"GDSII file ''{filename}'' has been created successfully.")

    ```


    This code will create a GDSII file named "Oval.gds" containing an oval with the
    specified dimensions.'
  context: Oval.gds
  question: Generate an oval with major axis of 20 mm, minor axis of 13 mm, on layer
    0, center at 0,0.
- answer: 'Here''s the Python code to generate a GDSII file for a square with the
    given specifications:


    ```python

    import gdspy


    # Define parameters

    width = 10.0  # Width of the square in mm

    layer = 0  # GDSII layer number


    # Coordinates for the square

    lower_right = (0, 0)

    lower_left = (-width, 0)

    upper_left = (-width, width)

    upper_right = (0, width)

    points = [lower_right, lower_left, upper_left, upper_right]


    # Create a new GDSII library

    gdsii_lib = gdspy.GdsLibrary()


    # Create a cell to contain the square

    cell = gdsii_lib.new_cell(''SQUARE'')


    # Create the square polygon

    square = gdspy.Polygon(points, layer=layer)


    # Add the square to the cell

    cell.add(square)


    # Define the filename

    filename = "Square.gds"


    # Save the GDSII file

    gdsii_lib.write_gds(filename)


    print(f"GDSII file ''{filename}'' has been created successfully.")

    ```


    This code will create a GDSII file named "Square.gds" containing a square with
    the specified dimensions.'
  context: Square.gds
  question: Generate a square with width 10 mm, put lower right corner of the square
    at 0,0.
- answer: "Here's the Python code to generate a GDSII file for an equilateral triangle\
    \ with the given specifications:\n\n```python\nimport gdspy\nimport numpy as np\n\
    \n# Define parameters\nedge_length = 10.0  # Length of each edge of the triangle\
    \ in mm\nlayer = 0  # GDSII layer number\n\n# Calculate the height of the equilateral\
    \ triangle\nheight = np.sqrt(3) / 2 * edge_length\n\n# Calculate the vertices\
    \ of the triangle\nvertices = [\n    (0, 2 * height / 3),  # Top vertex\n    (-edge_length\
    \ / 2, -height / 3),  # Bottom left vertex\n    (edge_length / 2, -height / 3)\
    \  # Bottom right vertex\n]\n\n# Create a new GDSII library\ngdsii_lib = gdspy.GdsLibrary()\n\
    \n# Create a cell to contain the triangle\ncell = gdsii_lib.new_cell('TRIANGLE')\n\
    \n# Create the triangle polygon\ntriangle = gdspy.Polygon(vertices, layer=layer)\n\
    \n# Add the triangle to the cell\ncell.add(triangle)\n\n# Define the filename\n\
    filename = \"Triangle.gds\"\n\n# Save the GDSII file\ngdsii_lib.write_gds(filename)\n\
    \nprint(f\"GDSII file '{filename}' has been created successfully.\")\n```\n\n\
    This code will create a GDSII file named \"Triangle.gds\" containing an equilateral\
    \ triangle with the specified dimensions."
  context: Triangle.gds
  question: Generate a triangle with each edge 10 mm, center at 0,0.
- answer: 'Here''s the Python code to generate a GDSII file for a heptagon with the
    given specifications:


    ```python

    import gdspy

    import numpy as np


    # Define parameters

    edge_length = 10.0  # Length of each edge of the heptagon in mm

    layer = 0  # GDSII layer number


    # Calculate the radius of the circumcircle of the heptagon

    radius = edge_length / (2 * np.sin(np.pi / 7))


    # Generate the vertices of the heptagon

    angles = np.linspace(0, 2 * np.pi, 8)

    vertices = [(radius * np.cos(angle), radius * np.sin(angle)) for angle in angles[:-1]]


    # Create a new GDSII library

    gdsii_lib = gdspy.GdsLibrary()


    # Create a cell to contain the heptagon

    cell = gdsii_lib.new_cell(''HEPTAGON'')


    # Create the heptagon polygon

    heptagon = gdspy.Polygon(vertices, layer=layer)


    # Add the heptagon to the cell

    cell.add(heptagon)


    # Define the filename

    filename = "Heptagon.gds"


    # Save the GDSII file

    gdsii_lib.write_gds(filename)


    print(f"GDSII file ''{filename}'' has been created successfully.")

    ```


    This code will create a GDSII file named "Heptagon.gds" containing a heptagon
    with the specified dimensions.'
  context: Heptagon.gds
  question: Generate a Heptagon with each edge 10 mm, center at 0,0.
- answer: 'Here''s the Python code to generate a GDSII file for an octagon with the
    given specifications:


    ```python

    import gdspy

    import numpy as np


    # Define parameters

    edge_length = 10.0  # Length of each edge of the octagon in mm

    layer = 0  # GDSII layer number


    # Calculate the radius of the circumcircle of the octagon

    radius = edge_length / (2 * np.sin(np.pi / 8))


    # Generate the vertices of the octagon

    angles = np.linspace(0, 2 * np.pi, 9)

    vertices = [(radius * np.cos(angle), radius * np.sin(angle)) for angle in angles[:-1]]


    # Create a new GDSII library

    gdsii_lib = gdspy.GdsLibrary()


    # Create a cell to contain the octagon

    cell = gdsii_lib.new_cell(''OCTAGON'')


    # Create the octagon polygon

    octagon = gdspy.Polygon(vertices, layer=layer)


    # Add the octagon to the cell

    cell.add(octagon)


    # Define the filename

    filename = "Octagon.gds"


    # Save the GDSII file

    gdsii_lib.write_gds(filename)


    print(f"GDSII file ''{filename}'' has been created successfully.")

    ```


    This code will create a GDSII file named "Octagon.gds" containing an octagon with
    the specified dimensions.'
  context: Octagon.gds
  question: Generate an Octagon with each edge 10 mm, center at 0,0.
- answer: "Here's the Python code to generate a GDSII file for a trapezoid with the\
    \ given specifications:\n\n```python\nimport gdspy\n\n# Define parameters\nupper_edge\
    \ = 10.0  # Upper edge of the trapezoid in mm\nlower_edge = 20.0  # Lower edge\
    \ of the trapezoid in mm\nheight = 8.0  # Height of the trapezoid in mm\nlayer\
    \ = 0  # GDSII layer number\n\n# Calculate the half-widths of the upper and lower\
    \ edges\nhalf_upper_edge = upper_edge / 2\nhalf_lower_edge = lower_edge / 2\n\n\
    # Vertices of the trapezoid centered at (0,0)\nvertices = [\n    (-half_lower_edge,\
    \ -height / 2),  # Lower left\n    (half_lower_edge, -height / 2),   # Lower right\n\
    \    (half_upper_edge, height / 2),    # Upper right\n    (-half_upper_edge, height\
    \ / 2)    # Upper left\n]\n\n# Create a new GDSII library\ngdsii_lib = gdspy.GdsLibrary()\n\
    \n# Create a cell to contain the trapezoid\ncell = gdsii_lib.new_cell('TRAPEZOID')\n\
    \n# Create the trapezoid polygon\ntrapezoid = gdspy.Polygon(vertices, layer=layer)\n\
    \n# Add the trapezoid to the cell\ncell.add(trapezoid)\n\n# Define the filename\n\
    filename = \"Trapezoid.gds\"\n\n# Save the GDSII file\ngdsii_lib.write_gds(filename)\n\
    \nprint(f\"GDSII file '{filename}' has been created successfully.\")\n```\n\n\
    This code will create a GDSII file named \"Trapezoid.gds\" containing a trapezoid\
    \ with the specified dimensions."
  context: Trapezoid.gds
  question: Generate a Trapezoid with upper edge 10 mm, lower edge 20 mm, height 8
    mm, center at 0,0.
- answer: "Here's the Python code to generate a GDSII file for a square array with\
    \ the given specifications:\n\n```python\nimport gdspy\n\n# Define parameters\n\
    square_size = 5.0  # Size of each square in mm\nnum_columns = 10  # Number of\
    \ columns\nnum_rows = 10  # Number of rows\nspacing = 20.0  # Spacing between\
    \ squares in mm\nlayer = 0  # GDSII layer number\n\n# Calculate the position of\
    \ the lower right square's upper right corner\nstart_x = -(square_size + spacing)\
    \ * (num_columns - 1)\nstart_y = -(square_size + spacing) * (num_rows - 1)\n\n\
    # Create a new GDSII library\ngdsii_lib = gdspy.GdsLibrary()\n\n# Create a cell\
    \ to contain the array of squares\ncell = gdsii_lib.new_cell('SQUARE_ARRAY')\n\
    \n# Loop to create the array of squares\nfor i in range(num_columns):\n    for\
    \ j in range(num_rows):\n        lower_left_x = start_x + i * (square_size + spacing)\n\
    \        lower_left_y = start_y + j * (square_size + spacing)\n        square\
    \ = gdspy.Rectangle(\n            (lower_left_x, lower_left_y),\n            (lower_left_x\
    \ + square_size, lower_left_y + square_size),\n            layer=layer\n     \
    \   )\n        cell.add(square)\n\n# Define the filename\nfilename = \"SquareArray.gds\"\
    \n\n# Save the GDSII file\ngdsii_lib.write_gds(filename)\n\nprint(f\"GDSII file\
    \ '{filename}' has been created successfully.\")\n```\n\nThis code will create\
    \ a GDSII file named \"SquareArray.gds\" containing a square array with the specified\
    \ dimensions."
  context: SquareArray.gds
  question: Generate a square array with 5*5 mm square, for 10 columns and 10 rows,
    each 20 mm apart, the lower left corner of the upper right square is at 0,0.
- answer: "Here's the Python code to generate a GDSII file for a rounded square with\
    \ the given specifications:\n\n```python\nimport gdspy\nimport numpy as np\n\n\
    # Define parameters\nside_length = 10.0  # Side length of the square in mm\ncorner_radius\
    \ = 1.0  # Radius of the rounded corners in mm\nlayer = 0  # GDSII layer number\n\
    \n# Create a new GDSII library\ngdsii_lib = gdspy.GdsLibrary()\n\n# Create a cell\
    \ to contain the rounded square\ncell = gdsii_lib.new_cell('ROUNDED_SQUARE')\n\
    \n# Create the main body of the square excluding the rounded corners\nmain_body\
    \ = gdspy.Rectangle(\n    (-side_length / 2 + corner_radius, -side_length / 2),\n\
    \    (side_length / 2 - corner_radius, side_length / 2),\n    layer=layer\n)\n\
    \n# Create the horizontal and vertical rectangles to fill in the sides\nhorizontal_rects\
    \ = [\n    gdspy.Rectangle(\n        (-side_length / 2 + corner_radius, -side_length\
    \ / 2),\n        (side_length / 2 - corner_radius, side_length / 2),\n       \
    \ layer=layer\n    )\n]\n\nvertical_rects = [\n    gdspy.Rectangle(\n        (-side_length\
    \ / 2, -side_length / 2 + corner_radius),\n        (-side_length / 2 + corner_radius,\
    \ side_length / 2 - corner_radius),\n        layer=layer\n    ),\n    gdspy.Rectangle(\n\
    \        (side_length / 2 - corner_radius, -side_length / 2 + corner_radius),\n\
    \        (side_length / 2, side_length / 2 - corner_radius),\n        layer=layer\n\
    \    )\n]\n\n# Create the arcs for the rounded corners with correct orientation\n\
    rounded_corners = [\n    gdspy.Round(\n        (-side_length / 2 + corner_radius,\
    \ -side_length / 2 + corner_radius),\n        corner_radius,\n        inner_radius=0,\n\
    \        initial_angle=np.pi,\n        final_angle=1.5 * np.pi,\n        layer=layer\n\
    \    ),\n    gdspy.Round(\n        (side_length / 2 - corner_radius, -side_length\
    \ / 2 + corner_radius),\n        corner_radius,\n        inner_radius=0,\n   \
    \     initial_angle=1.5 * np.pi,\n        final_angle=2 * np.pi,\n        layer=layer\n\
    \    ),\n    gdspy.Round(\n        (side_length / 2 - corner_radius, side_length\
    \ / 2 - corner_radius),\n        corner_radius,\n        inner_radius=0,\n   \
    \     initial_angle=0,\n        final_angle=0.5 * np.pi,\n        layer=layer\n\
    \    ),\n    gdspy.Round(\n        (-side_length / 2 + corner_radius, side_length\
    \ / 2 - corner_radius),\n        corner_radius,\n        inner_radius=0,\n   \
    \     initial_angle=0.5 * np.pi,\n        final_angle=np.pi,\n        layer=layer\n\
    \    )\n]\n\n# Add the main body, horizontal rectangles, vertical rectangles,\
    \ and rounded corners to the cell\ncell.add(main_body)\nfor rect in horizontal_rects:\n\
    \    cell.add(rect)\nfor rect in vertical_rects:\n    cell.add(rect)\nfor corner\
    \ in rounded_corners:\n    cell.add(corner)\n\n# Define the filename\nfilename\
    \ = \"RoundedSquare.gds\"\n\n# Save the GDSII file\ngdsii_lib.write_gds(filename)\n\
    \nprint(f\"GDSII file '{filename}' has been created successfully.\")\n```\n\n\
    This code will create a GDSII file named \"RoundedSquare.gds\" containing a rounded\
    \ square with the specified dimensions."
  context: RoundedSquare.gds
  question: Draw a 10*10 mm square, and do corner rounding for each corner with r=1
    mm.
task_description: Generate Python code for basic_shapes
version: 2
