created_by: Bo Wen<bwen@us.ibm.com>, Kuan Yu Hsieh<kyhsieh@ibm.com>
seed_examples:
- answer: "Here's the Python code to generate a GDSII file for an arrow with the given\
    \ specifications:\n\n```python\nimport gdspy\n\n# Define parameters\ntotal_length\
    \ = 10.0  # Total length of the arrow in mm\nhead_length = total_length / 3  #\
    \ Length of the arrow head in mm\nbody_length = total_length - head_length  #\
    \ Length of the arrow body in mm\nhead_width = head_length  # Width of the arrow\
    \ head in mm\nbody_width = head_width / 3  # Width of the arrow body in mm\nlayer\
    \ = 0  # GDSII layer number\n\n# Vertices for the arrow\nvertices = [\n    (0,\
    \ -body_width / 2),  # Start of body (bottom left)\n    (body_length, -body_width\
    \ / 2),  # End of body (bottom right)\n    (body_length, -head_width / 2),  #\
    \ Bottom of head\n    (total_length, 0),  # Tip of head\n    (body_length, head_width\
    \ / 2),  # Top of head\n    (body_length, body_width / 2),  # End of body (top\
    \ right)\n    (0, body_width / 2),  # Start of body (top left)\n    (0, -body_width\
    \ / 2)  # Closing the polygon\n]\n\n# Create a new GDSII library\ngdsii_lib =\
    \ gdspy.GdsLibrary()\n\n# Create a cell to contain the arrow\ncell = gdsii_lib.new_cell('ARROW')\n\
    \n# Create the arrow polygon\narrow = gdspy.Polygon(vertices, layer=layer)\n\n\
    # Add the arrow to the cell\ncell.add(arrow)\n\n# Define the filename\nfilename\
    \ = \"Arrow.gds\"\n\n# Save the GDSII file\ngdsii_lib.write_gds(filename)\n\n\
    print(f\"GDSII file '{filename}' has been created successfully.\")\n```\n\nThis\
    \ code will create a GDSII file named \"Arrow.gds\" containing an arrow with the\
    \ specified dimensions."
  context: Arrow.gds
  question: Generate an Arrow pointing to the right with length 10 mm, make the body
    1/3 width of the head, start at 0,0.
- answer: "Here's the Python code to generate a GDSII file for a grid with the given\
    \ specifications:\n\n```python\nimport gdspy\n\n# Define parameters\ngrid_spacing\
    \ = 5.0  # Spacing of the grid in \xB5m\ntotal_width = 200.0  # Total width of\
    \ the grid in \xB5m\ntotal_height = 400.0  # Total height of the grid in \xB5\
    m\nlayer = 1  # GDSII layer number\ndatatype = 4  # GDSII datatype\nplacement_x\
    \ = 0.1  # Placement x-coordinate in \xB5m (100 nm)\nplacement_y = 0.8  # Placement\
    \ y-coordinate in \xB5m (800 nm)\n\n# Create a new GDSII library\ngdsii_lib =\
    \ gdspy.GdsLibrary()\n\n# Create a cell to contain the grid\ncell = gdsii_lib.new_cell('GRID')\n\
    \n# Create vertical lines\nx = placement_x\nwhile x <= placement_x + total_width:\n\
    \    line = gdspy.Rectangle((x, placement_y), (x, placement_y + total_height),\
    \ layer=layer, datatype=datatype)\n    cell.add(line)\n    x += grid_spacing\n\
    \n# Create horizontal lines\ny = placement_y\nwhile y <= placement_y + total_height:\n\
    \    line = gdspy.Rectangle((placement_x, y), (placement_x + total_width, y),\
    \ layer=layer, datatype=datatype)\n    cell.add(line)\n    y += grid_spacing\n\
    \n# Define the filename\nfilename = \"Grid.gds\"\n\n# Save the GDSII file\ngdsii_lib.write_gds(filename)\n\
    \nprint(f\"GDSII file '{filename}' has been created successfully.\")\n```\n\n\
    This code will create a GDSII file named \"Grid.gds\" containing a grid with the\
    \ specified dimensions and properties."
  context: Grid.gds
  question: "Draw the GDSII for a grid: Grid on Layer 1, DATATYPE 4, 5 \xB5m grid,\
    \ and total width is 200 \xB5m and height is 400 \xB5m, placed at coordinates\
    \ (100,800) nanometers."
- answer: "Here's the Python code to generate a GDSII file for a serpentine pattern\
    \ with the given specifications:\n\n```python\nimport gdspy\n\n# Constants for\
    \ the design\npath_width = 1  # Width of the path in micrometers\nsegment_length\
    \ = 50.0  # Length of the horizontal segments in micrometers\nsegment_height =\
    \ 50.0  # Height of the vertical segments in micrometers\nnum_turns = 15  # Number\
    \ of turns in the serpentine shape\nlayer = 2  # GDSII layer\ndatatype = 6  #\
    \ GDSII datatype\n\n# Initialize the GDSII library\ngdsii = gdspy.GdsLibrary()\n\
    \n# Create a new cell\ncell = gdsii.new_cell('SERPENTINE_PATTERN')\n\n# Starting\
    \ point of the serpentine path\nx, y = 0, 0\n\n# Points for the serpentine path\n\
    points = [(x, y)]\n\nfor i in range(num_turns):\n    # Move up or down depending\
    \ on the turn index\n    y += segment_height if i % 2 == 0 else -segment_height\n\
    \    points.append((x, y))\n\n    # Move to the right after each vertical move\
    \ except after the last turn\n    if i < num_turns - 1:\n        x += segment_length\n\
    \        points.append((x, y))\n\n# Create the serpentine path using gdspy.FlexPath\n\
    serpentine_path = gdspy.FlexPath(\n    points, \n    path_width, \n    layer=layer,\
    \ \n    datatype=datatype, \n    corners='natural'\n)\n\n# Add the path to the\
    \ cell\ncell.add(serpentine_path)\n\n# Define the filename\nfilename = \"Serpentine.gds\"\
    \n\n# Save the GDSII file\ngdsii.write_gds(filename)\n\nprint(f\"GDSII file '{filename}'\
    \ has been created successfully.\")\n```\n\nThis code will create a GDSII file\
    \ named \"Serpentine.gds\" containing a serpentine pattern with the specified\
    \ dimensions and properties."
  context: Serpentine.gds
  question: "Generate a serpentine pattern with a path width of 1 \xB5m, 15 turns,\
    \ each segment being 50 \xB5m long and tall, starting at (0,0), on layer 2, datatype\
    \ 6."
- answer: "Here's the Python code to generate a GDSII file for a rectangle with text\
    \ as specified:\n\n```python\nimport gdspy\n\n# Define parameters\nrectangle_width\
    \ = 30.0  # Width of the rectangle in mm\nrectangle_height = 10.0  # Height of\
    \ the rectangle in mm\ntext = \"IBM Research\"  # Text to be added\ntext_size\
    \ = 2.0  # Size of the text in mm\ntext_layer = 1  # GDSII layer number for the\
    \ text\nrectangle_layer = 0  # GDSII layer number for the rectangle\n\n# Create\
    \ a new GDSII library\ngdsii_lib = gdspy.GdsLibrary()\n\n# Create a cell to contain\
    \ the rectangle and text\ncell = gdsii_lib.new_cell('RECTANGLE_WITH_TEXT')\n\n\
    # Create the rectangle\nrectangle = gdspy.Rectangle(\n    (-rectangle_width /\
    \ 2, -rectangle_height / 2),\n    (rectangle_width / 2, rectangle_height / 2),\n\
    \    layer=rectangle_layer\n)\ncell.add(rectangle)\n\n# Create the text and calculate\
    \ the bounding box\ntext_label = gdspy.Text(\n    text,\n    text_size,\n    position=(0,\
    \ 0),\n    layer=text_layer\n)\n\n# Calculate the text width and height to center\
    \ it properly\ntext_bounding_box = text_label.get_bounding_box()\ntext_width =\
    \ text_bounding_box[1][0] - text_bounding_box[0][0]\ntext_height = text_bounding_box[1][1]\
    \ - text_bounding_box[0][1]\n\n# Adjust the text position to center it within\
    \ the rectangle\ntext_label.translate(-text_width / 2, -text_height / 2)\n\n#\
    \ Add the text to the cell\ncell.add(text_label)\n\n# Define the filename\nfilename\
    \ = \"RectangleWithText.gds\"\n\n# Save the GDSII file\ngdsii_lib.write_gds(filename)\n\
    \nprint(f\"GDSII file '{filename}' has been created successfully.\")\n```\n\n\
    This code will create a GDSII file named \"RectangleWithText.gds\" containing\
    \ a rectangle with centered text as specified."
  context: RectangleWithText.gds
  question: Generate a GDS with a 30*10 mm rectangle on layer 0 with a text "IBM Research"
    at the center of the rectangle. Put the text on layer 1.
- answer: "Here's the Python code to generate a GDSII file for a parametric spiral\
    \ with the given specifications:\n\n```python\nimport gdspy\nimport numpy as np\n\
    \n# Define parameters\nt_values = np.linspace(0, 6 * np.pi, 1000)  # Parameter\
    \ t from 0 to 6pi\nr_values = np.exp(-0.1 * t_values)  # r(t) = e^(-0.1t)\n\n\
    # Calculate x and y coordinates of the spiral\nx_values = r_values * np.cos(t_values)\n\
    y_values = r_values * np.sin(t_values)\n\n# Create a new GDSII library\ngdsii_lib\
    \ = gdspy.GdsLibrary()\n\n# Create a cell to contain the spiral\ncell = gdsii_lib.new_cell('SPIRAL')\n\
    \n# Create the spiral path\nspiral_path = gdspy.FlexPath(\n    points=list(zip(x_values,\
    \ y_values)),\n    width=1,  # Path width in the desired units\n    layer=0\n\
    )\n\n# Add the spiral path to the cell\ncell.add(spiral_path)\n\n# Define the\
    \ filename\nfilename = \"Spiral.gds\"\n\n# Save the GDSII file\ngdsii_lib.write_gds(filename)\n\
    \nprint(f\"GDSII file '{filename}' has been created successfully.\")\n```\n\n\
    This code will create a GDSII file named \"Spiral.gds\" containing a parametric\
    \ spiral with the specified equation and properties."
  context: Spiral.gds
  question: Generate a Parametric spiral with r(t) = e^(-0.1t), for 0 <= t <= 6pi,
    line width 1.
- answer: 'Here''s the Python code to generate a GDSII file with the specified text:


    ```python

    import gdspy


    # Define parameters

    text = "Hello, GDS!"

    text_height = 5.0  # Height of the text in mm

    layer = 1  # GDSII layer number


    # Create a new GDSII library

    gdsii_lib = gdspy.GdsLibrary()


    # Create a cell to contain the text

    cell = gdsii_lib.new_cell(''TEXT'')


    # Create the text

    text_obj = gdspy.Text(text, text_height, (0, 0), layer=layer)


    # Get the text dimensions to center it

    bbox = text_obj.get_bounding_box()

    text_width = bbox[1][0] - bbox[0][0]

    text_height_actual = bbox[1][1] - bbox[0][1]


    # Move the text to center it at (0,0)

    text_obj.translate(-text_width/2, -text_height_actual/2)


    # Add the text to the cell

    cell.add(text_obj)


    # Define the filename

    filename = "Text.gds"


    # Save the GDSII file

    gdsii_lib.write_gds(filename)


    print(f"GDSII file ''{filename}'' has been created successfully.")

    ```


    This code will create a GDSII file named "Text.gds" containing the text "Hello,
    GDS!" centered at (0,0) with a height of 5 mm on layer 1.'
  context: Text.gds
  question: Generate a GDS file with the text "Hello, GDS!" centered at (0,0), with
    a height of 5 mm, on layer 1.
task_description: Generate Python code for advanced_shapes
version: 2
