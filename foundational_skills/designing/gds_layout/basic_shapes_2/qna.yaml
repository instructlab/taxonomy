created_by: Bo Wen<bwen@us.ibm.com>, Kuan Yu Hsieh<kyhsieh@ibm.com>
seed_examples:
- answer: "Here's the Python code to generate a GDSII file for a circle with fiducial\
    \ marks as specified:\n\n```python\nimport gdspy\n\n# Define parameters\ncircle_radius\
    \ = 1.6e3  # radius in micrometers (1.6 mm = 1600 \xB5m)\nfiducial_spacing = 200\
    \  # spacing in micrometers\nfiducial_size = 5  # size of fiducial mark in micrometers\n\
    annotation_offset = 10  # offset for annotation text in micrometers\n\n# Create\
    \ a new GDSII file and main cell\ngdsii_file = gdspy.GdsLibrary()\nmain_cell =\
    \ gdsii_file.new_cell('MAIN')\n\n# Create the circle\ncircle = gdspy.Round((0,\
    \ 0), circle_radius)\nmain_cell.add(circle)\n\n# Function to create a '+' shape\n\
    def create_fiducial(center, size):\n    half_size = size / 2\n    # Vertical part\n\
    \    vertical = gdspy.Rectangle(\n        (center[0] - half_size, center[1] -\
    \ size),\n        (center[0] + half_size, center[1] + size)\n    )\n    # Horizontal\
    \ part\n    horizontal = gdspy.Rectangle(\n        (center[0] - size, center[1]\
    \ - half_size),\n        (center[0] + size, center[1] + half_size)\n    )\n  \
    \  return [vertical, horizontal]\n\n# Function to create an annotation\ndef create_annotation(center,\
    \ row, col):\n    label = f\"{row}{col}\"\n    text = gdspy.Text(label, 10, (center[0]\
    \ + annotation_offset, center[1] + annotation_offset))\n    return text\n\n# Add\
    \ fiducial marks ('+' shapes) and annotations inside the main circle\nnum_fiducials\
    \ = int(circle_radius * 2 / fiducial_spacing)\nrows = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \nfor x in range(-num_fiducials // 2, num_fiducials // 2 + 1):\n    for y in range(-num_fiducials\
    \ // 2, num_fiducials // 2 + 1):\n        fiducial_center = (x * fiducial_spacing,\
    \ y * fiducial_spacing)\n        if fiducial_center[0]**2 + fiducial_center[1]**2\
    \ <= circle_radius**2:\n            fiducial = create_fiducial(fiducial_center,\
    \ fiducial_size)\n            for part in fiducial:\n                main_cell.add(part)\n\
    \            \n            row = rows[y + num_fiducials // 2]\n            col\
    \ = x + num_fiducials // 2 + 1\n            annotation = create_annotation(fiducial_center,\
    \ row, col)\n            main_cell.add(annotation)\n\n# Define the filename\n\
    filename = \"FiducialCircle.gds\"\n\n# Save the GDSII file\ngdsii_file.write_gds(filename)\n\
    \nprint(f\"GDSII file '{filename}' has been created successfully.\")\n```\n\n\
    This code will create a GDSII file named \"FiducialCircle.gds\" containing a circle\
    \ with fiducial marks and annotations as specified."
  context: FiducialCircle.gds
  question: 'Draw a 3.2 mm circle, with fiducial marks inside. The fiducial marks
    should be a "+" sign, with equal length and width. Each marker should be 200 um
    apart. There will be annotations next to each marker. Row: A -> Z, column: start
    from 1.'
- answer: 'Here''s the Python code to generate a GDSII file for a regular hexagon
    with the given specifications:


    ```python

    import gdspy

    import numpy as np


    # Define parameters

    edge_length = 10.0  # Length of each edge of the hexagon in mm

    layer = 0  # GDSII layer number


    # Calculate the radius of the circumcircle of the hexagon

    radius = edge_length


    # Generate the vertices of the hexagon

    angles = np.linspace(0, 2 * np.pi, 7)

    vertices = [(radius * np.cos(angle), radius * np.sin(angle)) for angle in angles[:-1]]


    # Create a new GDSII library

    gdsii_lib = gdspy.GdsLibrary()


    # Create a cell to contain the hexagon

    cell = gdsii_lib.new_cell(''HEXAGON'')


    # Create the hexagon polygon

    hexagon = gdspy.Polygon(vertices, layer=layer)


    # Add the hexagon to the cell

    cell.add(hexagon)


    # Define the filename

    filename = "Hexagon.gds"


    # Save the GDSII file

    gdsii_lib.write_gds(filename)


    print(f"GDSII file ''{filename}'' has been created successfully.")

    ```


    This code will create a GDSII file named "Hexagon.gds" containing a regular hexagon
    with the specified dimensions.'
  context: Hexagon.gds
  question: Generate a regular hexagon with each edge 10 mm, center at 0,0.
- answer: 'Here''s the Python code to generate a GDSII file for a regular pentagon
    with the given specifications:


    ```python

    import gdspy

    import numpy as np


    # Define parameters

    edge_length = 10.0  # Length of each edge of the pentagon in mm

    layer = 0  # GDSII layer number


    # Calculate the radius of the circumcircle of the pentagon

    radius = edge_length / (2 * np.sin(np.pi / 5))


    # Generate the vertices of the pentagon

    angles = np.linspace(0, 2 * np.pi, 6)

    vertices = [(radius * np.cos(angle), radius * np.sin(angle)) for angle in angles[:-1]]


    # Create a new GDSII library

    gdsii_lib = gdspy.GdsLibrary()


    # Create a cell to contain the pentagon

    cell = gdsii_lib.new_cell(''PENTAGON'')


    # Create the pentagon polygon

    pentagon = gdspy.Polygon(vertices, layer=layer)


    # Add the pentagon to the cell

    cell.add(pentagon)


    # Define the filename

    filename = "Pentagon.gds"


    # Save the GDSII file

    gdsii_lib.write_gds(filename)


    print(f"GDSII file ''{filename}'' has been created successfully.")

    ```


    This code will create a GDSII file named "Pentagon.gds" containing a regular pentagon
    with the specified dimensions.'
  context: Pentagon.gds
  question: Generate a regular pentagon with each edge 10 mm, center at 0,0.
task_description: Generate Python code for basic_shapes
version: 2
